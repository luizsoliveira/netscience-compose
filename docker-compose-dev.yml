version: "3.8"
services:
  react-admin:
    build:
      target: development
      dockerfile: dockerfiles/react-admin-dev
    environment:
      API_BASE_URL: "/api"
      WS_BASE_URL: "/websocket"
    volumes:
      - ./app/admin:/app/admin
      - admin_node_modules_volume:/app/admin/node_modules
      - "./config/timezone:/etc/timezone:ro"
    # ports:
    #   - 7000:7000
    # profiles:
    #   - donotstart

  websocket:
    build:
      target: development
      dockerfile: dockerfiles/websocket-dev
    volumes:
      - ./app/websocket:/app/
      - ws_node_modules_volume:/app/node_modules
      - tasks_volume:/var/tasks
      - "./config/timezone:/etc/timezone:ro"
    ports:
      - 7002:3000

  postgrest:
    image: postgrest/postgrest
    ports:
      - "7001:3000"
    environment:
      # String DB connection used by PostgREST to connect to postgres
      PGRST_DB_URI: ${PGRST_DB_URI}
      # Address were the OpenAPI will be served
      PGRST_OPENAPI_SERVER_PROXY_URI: $PGRST_OPENAPI_SERVER_PROXY_URI
      # DB role that will be used for public API access
      PGRST_DB_ANON_ROLE: ${PGRST_DB_ANON_ROLE}
      # List with one or more schemas that will be served as API by PostgREST
      PGRST_DB_SCHEMAS: ${PGRST_DB_SCHEMAS}
      #JWT secret that will be read by the Posgrest application
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      #JWT secret that will be read by stored procedures with the database
      PGRST_APP_SETTINGS_JWT_SECRET: ${PGRST_JWT_SECRET}
    depends_on:
      - postgres
    volumes:
      - "./config/timezone:/etc/timezone:ro"
  
  postgres:
    image: postgres:14.1-alpine
    ports:
      - "7432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - "./config/timezone:/etc/timezone:ro"
      - pgdata_volume:/var/lib/postgresql/data
      # Script with initial data to be executed just in the first boot
      - ./app/api/sql/:/docker-entrypoint-initdb.d/

  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - "7880:8080"
    depends_on:
      - postgres
    environment:
      # Connection from Swagger to PostgREST OpenAPI endpoint
      API_URL: http://localhost:7001/
    
  pgadmin:
    image: dpage/pgadmin4:7
    ports:
      - "7500:5000"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_PORT=5000
    volumes:
      - "./app/api/data/pgadmin:/var/lib/pgadmin"
      - "./config/timezone:/etc/timezone:ro"
    restart: always

  nginx:
    image: nginx
    depends_on:
      - postgrest
      # - react-admin
      - websocket
    volumes:
      - "./config/nginx/development.conf.template:/etc/nginx/templates/default.conf.template"
      - "./config/timezone:/etc/timezone:ro"
    environment:
      - NGINX_HOST=localhost
      #- NGINX_HOST=ensc-cnl-15.engineering.sfu.ca
      - REACT_ADMIN_HOST=react-admin:7000
      - POSTGREST_HOST=postgrest:3000
      - WEBSOCKET_HOST=websocket:3000
      - NGINX_PORT=80
    # command: [nginx-debug, '-g', 'daemon off;']
    ports:
      - "80:80"
    restart: 
      always


  node-cyberdefense:
    build:
      context: ./
      #dockerfile: dockerfiles/cyberdefense-dev
      dockerfile: dockerfiles/cyberdefense
    stdin_open: true
    volumes:
      - "./nodes/cyberdefense:/usr/src/app"
      - cache_volume:/var/cache
      - tasks_volume:/var/tasks
    #command: "sleep +5 ; ls ; python example_netscience.py"
    #tty: true
    restart: "no" 


volumes:
  pgdata_volume:
    driver: local
  cache_volume:
    driver: local
  tasks_volume:
    driver: local
  admin_node_modules_volume:
    driver: local
  ws_node_modules_volume:
    driver: local